（九）图像阈值
当像素高于阈值时,给这个像素一个新值(可以是白色),否则给它另一种颜色

不同的阈值方法:
cv2.THRESH_BINARY  #黑白二值(二值阈值化)
cv2.THRESH_BINARY_INV  #黑白二值反转(反转二值阈值化)
cv2.THRESH_TRUNC  #得到的图像为多像素值(截断阈值化)
cv2.THRESH_TOZERO  #阈值化到0
cv2.THRESH_TOZERO_INV #反转阈值化到0
/*
函数原型
cv2.threshold()
def threshold(src, #原图像
    thresh, #阈值
    maxval, #使用 CV_THRESH_BINARY 和 CV_THRESH_BINARY_INV 的最大值
    type, #阈值类型
    dst=None)#输出图像


cv2.adaptiveThreshold()
def adaptiveThreshold(src, #输入图像
        maxValue, #使用 CV_THRESH_BINARY 和 CV_THRESH_BINARY_INV 的最大值
        adaptiveMethod,#CV_ADAPTIVE_THRESH_MEAN_C 或CV_ADAPTIVE_THRESH_GAUSSIAN_C  自适应阈值算法
        thresholdType, #阈值类型CV_THRESH_BINARY,CV_THRESH_BINARY_INV
        blockSize, #计算阈值的象素邻域大小
        C, #常数,阈值就等于平均值或加权值-常数
        dst=None)#输出图像
*/


1 简单阈值
import cv2
import numpy as np
from matplotlib import pyplot as plt

img=cv2.imread('test1.jpg',0)
ret,thresh1=cv2.threshold(img,127,255,cv2.THRESH_BINARY)
ret,thresh2=cv2.threshold(img,127,255,cv2.THRESH_BINARY_INV)
ret,thresh3=cv2.threshold(img,127,255,cv2.THRESH_TRUNC)
ret,thresh4=cv2.threshold(img,127,255,cv2.THRESH_TOZERO)
ret,thresh5=cv2.threshold(img,127,255,cv2.THRESH_TOZERO_INV)

titles=['Original Image','BINARY','BINARY_INV','TRUNC','TOZERO','TOZERO_INV']
images=[img,thresh1,thresh2,thresh3,thresh4,thresh5]

for i in range(6):
    plt.subplot(2,3,i+1),plt.imshow(images[i],'gray')
    plt.title(titles[i])
    plt.xticks([]),plt.yticks([])
plt.show()

2自适应阈值
如果图像不同部分具有不同亮度,就会用到自适应阈值
指定阈值的方法 adaptive method
示例代码如下:
mg=cv2.imread("test.jpg",0)
#中值滤波
img=cv2.medianBlur(img,5)
ret,th1=cv2.threshold(img,127,255,cv2.THRESH_BINARY)
#th2=cv2.adaptiveThreshold(img,255,cv2.ADAPTIVE_THRESH_MEAN_C,cv2.THRESH_BINARY,11,2)
th3 = cv2.adaptiveThreshold(img,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,\
cv2.THRESH_BINARY,11,2)
titles=['Original Image', 'Global Thresholding (v = 127)',
'Adaptive Mean Thresholding', 'Adaptive Gaussian Thresholding']
images=[img,th1,th2,th3]
for i in range(4):
    plt.subplot(2, 2, i + 1), plt.imshow(images[i], 'gray')
    plt.title(titles[i])
    plt.xticks([]), plt.yticks([])
plt.show()

3 otsu’s 二值化
img=cv2.imread('test.jpg',0)
#全局阈值
ret1,th1=cv2.threshold(img,127,255,cv2.THRESH_BINARY)
#二值化阈值
ret2,th2=cv2.threshold(img,0,255,cv2.THRESH_BINARY_INV+cv2.THRESH_OTSU)
#(5,5)为高斯核的大小,0为标准差
blur=cv2.GaussianBlur(img,(5,5),0)
#阈值一定要设为0
ret2,th3=cv2.threshold(blur,0,255,cv2.THRESH_BINARY+cv2.THRESH_OTSU)

#
images=[img,0,th1,
        img,0,th2,
        blur,0,th3]

titles=['Original Noisy Image','Histogram','Global Thresholding (v=127)',
'Original Noisy Image','Histogram',"Otsu's Thresholding",
'Gaussian filtered Image','Histogram',"Otsu's Thresholding"]

for i in range(3):
    #将多个图画到一个平面上
    #参数:m,n,p
    #m行,n列,p为图所在位置
    plt.subplot(3,3,i*3+1),\
                plt.imshow(images[i*3],
                'gray')
    #titie标题
    #xtick是x轴刻度
    #xticklabel是x轴刻度值
    plt.title(titles[i*3]), \
    plt.xticks([]),\
    plt.yticks([])

    #将多个图像画到平面上
    plt.subplot(3,3,i*3+2),plt.hist(images[i*3].ravel(),256)
    plt.title(titles[i*3+1]), plt.xticks([]), plt.yticks([])

    #将多个图像画到平面上
    plt.subplot(3,3,i*3+3),plt.imshow(images[i*3+2],'gray')
    plt.title(titles[i*3+2]), plt.xticks([]), plt.yticks([])
plt.show()

4 otsu’s二值化的工作原理
img = cv2.imread("test.jpg", 0)
blur = cv2.GaussianBlur(img, (5, 5), 0)
# 计算归一化直方图
hist = cv2.calcHist([blur], [0], None, [256], [0, 256])
hist_norm = hist.ravel() / hist.max()
Q = hist_norm.cumsum()

bins = np.arange(256)

fn_min = np.inf
thresh = -1

for i in range(1, 256):
    p1, p2 = np.hsplit(hist_norm, [i])
    q1, q2 = Q[i], Q[255] - Q[i]
    b1, b2 = np.hsplit(bins, [i])
    #print(q1,q2)
    m1, m2 = np.sum(p1 * b1) / q1, np.sum(p2 * b2) / q2
    v1, v2 = np.sum(((b1 - m1) ** 2) * p1) / q1, np.sum(((b2 - m2) ** 2) * p2) / q2
    fn = v1 * q1 + v2 * q2
    if fn < fn_min:
        fn_min = fn
        thresh = i

ret, otsu = cv2.threshold(blur, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
print(thresh, ret)

(十)图像平滑
通过低通滤波器对图像进行模糊
通过自定义滤波器对图像进行卷积
def filter2D(src, #输入图像
        ddepth, #图像深度
        kernel, #卷积核,单通道浮点矩阵
        dst=None, #输出图像
        anchor=None, #一个被滤波的点在核内的位置(中心)
        delta=None,
        borderType=None)#边界类型

def ones(shape, #数组的形状
        dtype=None, #数组的数据类型
        order='C'): #数组元素在内存中的排列方式,c表示c语言的

a = empty(shape, dtype, order)
multiarray.copyto(a, 1, casting='unsafe')
return a

示例代码
img=cv2.imread('test.jpg')
kernel=np.ones((5,5),#数组形状
               np.float32)/25#数组的数据类型

#print(kernel)
dst=cv2.filter2D(img,-1,kernel)

plt.subplot(121),plt.imshow(img),plt.title('Original')
plt.xticks([]),plt.yticks([])

plt.subplot(122),plt.imshow(dst),plt.title('Averaging')
plt.xticks([]),plt.yticks([])
plt.show()
/*
图像模糊(图像平滑)

使用低通滤波器可以实现图像模糊

1 平均
函数原型
def blur(src, #源图像
        ksize, #内核大小
        dst=None, #输出图像
        anchor=None, #中心锚点
        borderType=None)# 边界模式
2 高斯模糊
函数原型
def GaussianBlur(src, #输入图像
        ksize, #高斯滤波模版大小
        sigmaX, #横向滤波系数
        dst=None, #输出图像
        sigmaY=None,#纵向滤波系数
        borderType=None)

3 中值模糊
def medianBlur(src, #源图像
        ksize, #中值滤波器的模版的大小
        dst=None)#输出图像

4 双边滤波
def bilateralFilter(src, #输入图像
        d, #每个像素邻域的直径
        sigmaColor, #颜色空间的标准偏差
        sigmaSpace, #坐标空间的标准偏差
        dst=None, #输出图像
        borderType=None)#边缘点插值类型
*/
示例代码如下:
import cv2
import numpy as np
from matplotlib import pyplot as plt

#读入图像
img=cv2.imread("../test.jpg")
#均值滤波
#blur=cv2.blur(img,(5,5))
#高斯模糊
#blur=cv2.GaussianBlur(img,(5,5),0)
#中值模糊
#blur=cv2.medianBlur(img,5)
#双边滤波
blur=cv2.bilateralFilter(img,9,75,75)
#原图像
plt.subplot(121),plt.imshow(img),plt.title("Original")
plt.xticks([]),plt.yticks([])
#平均后
plt.subplot(122),plt.imshow(blur),plt.title('Blurred')
plt.xticks([]),plt.yticks([])
plt.show()


(十一)形态学转换
形态学操作:
1 腐蚀
def erode(src, #源图像
        kernel, #腐蚀操作的内核
        dst=None, #输出图像
        anchor=None, #内核中心点
        iterations=None, #腐蚀次数
        borderType=None, #推断边缘类型
        borderValue=None) #边缘值
2 膨胀
def dilate(src, #源图像
        kernel, #腐蚀操作的内核
        dst=None, #输出图像
        anchor=None, #内核中心点
        iterations=None, #腐蚀次数
        borderType=None, #推断边缘类型
        borderValue=None) #边缘值
3 开运算
先腐蚀再膨胀

4 闭运算
先膨胀再腐蚀

5 形态学梯度
膨胀与腐蚀的差别
6 礼帽
原始图像与进行开运算进行后的图像的差
7 黑帽
进行闭运算之后得到的图像与原始图像的差

函数原型
def morphologyEx(src, #输入图像
    op, #形态学运算类型
    kernel, #内核
    dst=None, #输出图像
    anchor=None, #中心锚点
    iterations=None, #函数迭代次数
    borderType=None, #边界模式
    borderValue=None)#常数边界值

示例代码如下:
img=cv2.imread('../j.png')
kernel=np.ones((5,5),np.uint8)
#腐蚀
dst1=cv2.erode(img,kernel,iterations=1)
#膨胀
dst2=cv2.dilate(img,kernel,iterations=1)
#开运算
dst3=cv2.morphologyEx(img,cv2.MORPH_OPEN,kernel)
#闭运算
dst4=cv2.morphologyEx(img,cv2.MORPH_CLOSE,kernel)
#形态梯度学
dst5=cv2.morphologyEx(img,cv2.MORPH_GRADIENT,kernel)
#礼帽
dst6=cv2.morphologyEx(img,cv2.MORPH_TOPHAT,kernel)
#黑帽
dst7=cv2.morphologyEx(img,cv2.MORPH_BLACKHAT,kernel)
#正常
plt.subplot(331),plt.imshow(img),plt.title('Normal')
plt.xticks([]),plt.yticks([])
#腐蚀
plt.subplot(332),plt.imshow(dst1),plt.title('Erode')
plt.xticks([]),plt.yticks([])
#膨胀
plt.subplot(333),plt.imshow(dst2),plt.title('Open')
plt.xticks([]),plt.yticks([])
#开运算
plt.subplot(334),plt.imshow(dst3),plt.title('Close')
plt.xticks([]),plt.yticks([])
#闭运算
plt.subplot(335),plt.imshow(dst4),plt.title('Dilate')
plt.xticks([]),plt.yticks([])
#形态学梯度
plt.subplot(336),plt.imshow(dst5),plt.title('Gradient')
plt.xticks([]),plt.yticks([])
#礼帽
plt.subplot(337),plt.imshow(dst6),plt.title('TopHat')
plt.xticks([]),plt.yticks([])
#黑帽
plt.subplot(338),plt.imshow(dst7),plt.title('BlackHat')
plt.xticks([]),plt.yticks([])
#输出结构化元素
print(cv2.getStructuringElement(cv2.MORPH_RECT,(5,5)))
print(cv2.getStructuringElement(cv2.MORPH_ELLIPSE,(5,5)))
print(cv2.getStructuringElement(cv2.MORPH_CROSS,(5,5)))
plt.show()

（十二）图像梯度
1 Sobel算子和Scharr算子
Sobel算是高斯平滑与微分操作的结合体
如果使用3*3滤波器,可以使用Scharr

2 Laplacian算子
#读入图像
img=cv2.imread('../test.jpg',0)
#cv2.CV_64F输出图像的深度,可以使用-1,
laplacian=cv2.Laplacian(img,cv2.CV_64F)
#参数1,0 在x方向求一阶导数,最大可求二阶
sobelx=cv2.Sobel(img,cv2.CV_64F,1,0,ksize=5)
#参数0,1 在y方向求一阶导数,最大可求二阶
sobely=cv2.Sobel(img,cv2.CV_64F,0,1,ksize=5)

#深度不同造成的效果
sobelx8u=cv2.Sobel(img,cv2.CV_8U,1,0,ksize=5)
sobelx64f=cv2.Sobel(img,cv2.CV_64F,1,0,ksize=5)
abs_sobelx64f=np.absolute(sobelx64f)
sobel_8u=np.uint8(abs_sobelx64f)

plt.subplot(321),plt.imshow(img,cmap='gray'),plt.title('Original')
plt.xticks([]),plt.yticks([])

plt.subplot(322),plt.imshow(laplacian,cmap='gray'),plt.title('Laplacian')
plt.xticks([]),plt.yticks([])

plt.subplot(323),plt.imshow(sobelx,cmap='gray'),plt.title('Sobel x')
plt.xticks([]),plt.yticks([])

plt.subplot(324),plt.imshow(sobely,cmap='gray'),plt.title('Sobel y')
plt.xticks([]),plt.yticks([])

plt.subplot(325),plt.imshow(sobelx8u,cmap='gray'),plt.title('Sobel CV_8U')
plt.xticks([]),plt.yticks([])

plt.subplot(326),plt.imshow(sobel_8u,cmap='gray'),plt.title('Sobel abs(CV_64F)')
plt.xticks([]),plt.yticks([])
plt.show()


（十三）canny边缘检测
函数原型:
def Canny(image, #单通道输入图像
        threshold1, #第一个阈值
        threshold2, #第二个阈值
        edges=None, #单通道存储边缘的输出图像
        apertureSize=None, #sobel算子内核大小
        L2gradient=None) #

1 原理
A 噪声去除 Blur
B 计算图像梯度  sobel算子
C 非极大值抑制 检查每一个像素点的梯度是不是周围具有相同梯度方向的点中最大的
D 滞后阈值  用两个阈值来确定真正的边界

2 canny边界检测

示例代码如下:
import cv2
import numpy as np
from matplotlib import pyplot as plt

img=cv2.imread('../test.jpg',0)
edges=cv2.Canny(img,#源图像
                100,#阈值一
                200)#阈值二

plt.subplot(121),plt.imshow(img,cmap='gray')
plt.title('Original Image'),plt.xticks([]),plt.yticks([])
plt.subplot(122),plt.imshow(edges,cmap='gray')
plt.title('Edge Image'),plt.xticks([]),plt.yticks([])
plt.show()


（十四）图像金字塔：高斯金字塔，拉普拉斯金字塔
/*
所用函数:
def pyrDown(src, #输入图像
        dst=None, #输出图像
        dstsize=None, #输出图像的大小
        borderType=None)#图像边界的处理方式

def pyrUp(src,
        dst=None,
        dstsize=None,
        borderType=None)
*/

1 原理
示例代码如下:
import cv2
import numpy as np,sys
from matplotlib import pyplot as plt

img=cv2.imread('../test.jpg',0)
lower_reso=cv2.pyrDown(img)
higher_reso=cv2.pyrUp(img)

plt.subplot(131),plt.imshow(img,'gray')
plt.title('Original')
    #,plt.xticks([]),plt.yticks([])
plt.subplot(132),plt.imshow(lower_reso,'gray')
plt.title('Lower_reso')
    #,plt.xticks([]),plt.yticks([])
plt.subplot(133),plt.imshow(higher_reso,'gray')
plt.title('Higher_reso')
    #,plt.xticks([]),plt.yticks([])
plt.show()

2 使用金字塔进行图像融合
示例代码如下:
import cv2
import numpy as np,sys
from matplotlib import pyplot as plt

"""
    使得img1的大小与img2相同
"""
def sameSize(img1, img2):
    rows, cols, dpt = img2.shape
    dst = img1[:rows,:cols]
    return dst

#读入图像
apple=cv2.imread('../apple.jpg')
orange=cv2.imread('../orange.jpg')


#为图像苹果创建一个高斯金字塔
temp_c=apple.copy()
apple_gp=[temp_c]
for i in range(6):
    temp_c=cv2.pyrDown(temp_c)
    apple_gp.append(temp_c)

#为图像橙子创建一个高斯金字塔
temp_c=orange.copy()
orange_gp=[temp_c]
for i in range(6):
    temp_c=cv2.pyrDown(temp_c)
    orange_gp.append(temp_c)

#为图像苹果创建一个拉普拉斯金字塔
apple_lp=[apple_gp[5]]
for i in range(5,0,-1):
    GE=cv2.pyrUp(apple_gp[i])
    L=cv2.subtract(apple_gp[i-1],sameSize(GE,apple_gp[i-1]))
    apple_lp.append(L)


#为图像橙子创建一个拉普拉斯金字塔
orange_lp=[orange_gp[5]]
for i in range(5,0,-1):
    GE=cv2.pyrUp(orange_gp[i])
    L=cv2.subtract(orange_gp[i-1],sameSize(GE,orange_gp[i-1]))
    orange_lp.append(L)

#1/2 Laplace金字塔进行拼接
LS=[]
for apple_l,orange_l in zip(apple_lp,orange_lp):
    rows,cols,dpt=apple_l.shape
    ls = np.hstack((apple_l[:,0:cols/2], orange_l[:,cols/2:]))
    LS.append(ls)

#对拼接后的laplace金字塔重建,取得融合后的图像
ls_=LS[0]
for i in range(1,6):
    ls_=cv2.pyrUp(ls_)
    ls_=cv2.add(sameSize(ls_,LS[i]),LS[i])

real=np.hstack((apple[:,:cols/2],orange[:,cols/2:]))

#保存图像
#cv2.imwrite('Pyramid_blending2.jpg',ls)
#cv2.imwrite('Direct_blending.jpg',real)
#显示图像
plt.subplot(121),plt.imshow(ls_,'gray')
plt.title('ls_')
plt.subplot(122),plt.imshow(real,'gray')
plt.title('real')
plt.show()