(一)图像及视频处理
#读取图像
img=cv2.imread('test.jpg',0)
plt.imshow(img,cmap='gray',interpolation='bicubic')
plt.xticks([]),plt.yticks([])
plt.show()



读取视频文件,显示视频,保存视频文件
从摄像头获取并显示视频

Cv2.VideoCapture()
Cv2.VdeoWrite()

#使用默认的内置设像头
cap = cv2.VideoCapture(0)
while (True):
    #检查是否初始化成功,不成功就调用cap.open()
    #cap.isOpened()

    # 一帧一帧的捕获图像
    #ret返回布尔值,检查帧是否读取正确
    ret, frame = cap.read()

    #读取视频的一些信息参数,
    for i in range(0, 18 ,1):
        print(cap.get(i))

# 修改一帧数据
gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

# 显示返回的一帧图像
cv2.imshow('frame', gray)



#按下q键退出程序
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
# 所有操作完成,后释放资源
cap.release()
cv2.destroyAllWindows()


#从文件中播放视频
直接修改上面的程序

将cap = cv2.VideoCapture(0)改为文件名

#播放视频文件
cap = cv2.VideoCapture('output.avi')

***********************************************************************************************************
（二）绘图函数
常用的图形绘制函数
cv2.line()  #画线
cv2.circle() #画圆
cv2.rectangle() #画矩型
cv2.ellipse() #画椭圆
#画多边形
pts=np.array()
pts.reshape()
cv2.putText() #图片上添加文字

函数原型如下:
def line(img, #图像文件
         pt1,
         pt2,
         color,#形状的颜色
         thickness=None,#默认值是1,线条的粗细
         lineType=None,#线条的类型
         shift=None)

def circle(img,
           center,
           radius,
           color,
           thickness=None,
           lineType=None,
           shift=None)

def rectangle(img,
              pt1,
              pt2,
              color,
              thickness=None,
              lineType=None,
              shift=None)

def ellipse(img,
            center,
            axes,
            angle,
            startAngle, #开始角度
            endAngle, #结束角度
            color,
            thickness=None,
            lineType=None,
            shift=None)

def putText(img,
            text,
            org,
            fontFace,
            fontScale,
            color,
            thickness=None,
            lineType=None,
            bottomLeftOrigin=None)
***********************************************************************************************************
（三）鼠标事件
   双击画圆
import cv2
import numpy as np

#events=[i for i in dir(cv2) if 'EVENT' in i]
#print(events)

#鼠标事件回调函数
def draw_circle(event,x,y,flags,param):
    if event==cv2.EVENT_LBUTTONDBLCLK:
        cv2.circle(img,(x,y),100,(255,0,0),-1)

#创建图像与窗口
#将窗口和回调函数邦定
img=np.zeros((512,512,3),np.uint8)
cv2.namedWindow("Mouse_draw")
cv2.setMouseCallback("Mouse_draw",draw_circle)

while(1):
    cv2.imshow("Mouse_draw",img)
    if cv2.waitKey(20)&0xFF==27:
        break;
cv2.destroyAllWindows()


 根据选择在拖动时画矩形或是画圆
import cv2
import numpy as np

# 当鼠标按下的为true
drawing = False
# 如果mode为true绘制矩形,按下m 绘制曲线
mode = True
lx, ly = -1, -1


# 回调函数
def draw_circle(event, x, y, flags, param):
    global lx, ly, drawing, mode
    # 当按下左健时返回起始位置坐标
    if event == cv2.EVENT_LBUTTONDOWN:
        drawing = True
        lx, ly = x, y
    # 当左健按下并移动是绘制图形,event(移动),flag(是否按下)
    elif event == cv2.EVENT_MOUSEMOVE and flags == cv2.EVENT_FLAG_LBUTTON:
        if drawing == True:
            if mode == True:
                cv2.rectangle(img, (lx, ly), (x, y), (0, 255, 0), -1)
            else:
                # 绘制圆
                cv2.circle(img, (x, y), 3, (0, 0, 255), -1)
    # 当鼠标放开停止
    elif event == cv2.EVENT_LBUTTONUP:
        drawing = False


img = np.zeros((512, 512, 3), np.uint8)
cv2.namedWindow("Mouse_draw2")
cv2.setMouseCallback('Mouse_draw2', draw_circle)
while (1):
    cv2.imshow('Mouse_draw2', img)
    k = cv2.waitKey(1) & 0xFF
    if k == ord('m'):
        mode = not mode
    elif k == 27:
        break

************************************************************************************************************
（四）使用滑动条作调色板
/*
cv2.getTrackbarPos()

cv2.createTrackbar()

函数原型
def getTrackbarPos(trackbarname, #滚动条名字

winname)#放置窗口的名字

def createTrackbar(trackbarName,
                   windowName,
                   value,
                   count,
                   onChange)

使用三个滚动条设置RGB
*/

import cv2
import numpy as np

def nothing(x):
    pass

#创建图像
img=np.zeros((300,512,3),np.uint8)
cv2.namedWindow("Trackbar")

cv2.createTrackbar("R","Trackbar",0,255,nothing)
cv2.createTrackbar("G","Trackbar",0,255,nothing)
cv2.createTrackbar("B","Trackbar",0,255,nothing)

switch='0:OFF\n1:ON'
cv2.createTrackbar(switch,'Trackbar',0,1,nothing)

while(1):
    cv2.imshow('Trackbar',img)
    k=cv2.waitKey(1)&0xFF
    if k==27:
        break

    r=cv2.getTrackbarPos('R','Trackbar')
    g=cv2.getTrackbarPos('G','Trackbar')
    b=cv2.getTrackbarPos('B','Trackbar')
    s=cv2.getTrackbarPos(switch,'Trackbar')

    if s==0:
        img[:]=0
    else:
        img[:]=[b,g,r]
cv2.destroyAllWindows()
************************************************************************************************************
（五）图像的基础操作
1 获取并修改像素值
import cv2
import numpy as np
img=cv2.imread('test.jpg')

#取得像素
px=img[20,20]
print(px)
blue=img[20,20,0]
print(blue)
#显示结果如下
#[191 191 191]
#191

#修改像素
img[20,20]=[255,255,255]
print(img[20,20])

#更好的方法
print(img.item(10,10,2))
img.itemset((10,10,2),100)
print(img.item(10,10,2))

2 获取图像属性
print(img.shape)
#(220,#行数
 265,#列数
 3)#通道数

#取得图形的像素数
print(img.size)
#174900

#返回图像的数据类型
print(img.dtype)
#uint8

3 图像的ROI :对一幅图像的特定区域进行操作,先择部分图像考贝到图像的其他区域
import cv2
import numpy as np
img=cv2.imread("test.jpg")
ball=img[20:30,30:40]
img[200:210,100:110]=ball

#显示图像,窗口会自动调整为图像大小
cv2.imshow("DrawView",img)
#等待用户键入
k=cv2.waitKey(0)
#释放窗体
cv2.destroyAllWindows()

4 拆分及合并图像通道
把RGB拆分为单个通道
把独立通道的图片合并成一个RGB图像

img=cv2.imread('test.jpg')
b,g,r=cv2.split(img)
img=cv2.merge(b,g,r)
#b=img[:,:,0]
#img[:,:,2]

5 为图像扩边
/*
cv2.copyMakeBorder()
def copyMakeBorder(src, #输入图像
                   top, #对应边界的像素数
                   bottom,
                   left,
                   right,
                   borderType,#要添加的边界类型
                   dst=None,
                   value=None)

cv2.BORDER_CONSTANT #添加有颜色的常数边界值
cv2.BORDER_REFLECT #边界元素的镜像
cv2.BORDER_REFLECT_101
cv2.BORDER_REPLICATE #重复最后一个元素
cv2.BORDER_WRAP
*/

import cv2
import numpy as np
from matplotlib import pyplot as plt
BLUE=[255,0,0]
img1=cv2.imread("test.jpg")

replicate=cv2.copyMakeBorder(img1,10,10,10,10,cv2.BORDER_REPLICATE)
reflect=cv2.copyMakeBorder(img1,10,10,10,10,cv2.BORDER_REFLECT)
reflect101=cv2.copyMakeBorder(img1,10,10,10,10,cv2.BORDER_REFLECT_101)
wrap=cv2.copyMakeBorder(img1,10,10,10,10,cv2.BORDER_WRAP)
constant=cv2.copyMakeBorder(img1,10,10,10,10,cv2.BORDER_CONSTANT,value=BLUE)
plt.subplot(231),plt.imshow(img1,'gray'),plt.title("ORIGINAL")
plt.subplot(232),plt.imshow(replicate,'gray'),plt.title("REPLICATE")
plt.subplot(233),plt.imshow(reflect,'gray'),plt.title("REFLECT")
plt.subplot(234),plt.imshow(reflect101,'gray'),plt.title("REFLECT_101")
plt.subplot(235),plt.imshow(wrap,'gray'),plt.title("WRAP")
plt.subplot(236),plt.imshow(constant,'gray'),plt.title("CONSTANT")
plt.show()

************************************************************************************************************
(六)图像上的算术运算
常用运算有:加法  减法  位运算
/*
cv2.add()

cv2.addWeighted()

函数原型
def add(src1,
        src2,
        dst=None,
        mask=None,
        dtype=None)

def addWeighted(src1, #第一个原数组
                alpha,#第一个原数组的权值
                src2,#第二个原数组
                beta,#第二个数组的权值
                gamma,#添加的常数项
                dst=None,#输出数组
                dtype=None)#输出阵列的可选深度
*/


1 图像加法

x=np.uint8([250])
y=np.uint8([10])
print(cv2.add(x,y))#250+10=260=>255
print(x+y)#250+10=260%256=4

#显示结果
# [[255]]
#[4]

2 图像混合
计算公式如下:
g(x)=(1-a)f0(x)+af1(x)

使用如下函数进行混合
img1=cv2.imread('test.jpg')
img2=cv2.imread('test1.jpg')

dst=cv2.addWeighted(img1,0.1,img2,0.9,0)
cv2.imshow('dst',dst)
cv2.waitKey(0)
cv2.destroyAllWindows()

3 按位与运算
#加载图像
img1=cv2.imread("test1.jpg")
img2=cv2.imread("test.jpg")

#创建ROI
rows,cols,channels=img2.shape
roi=img1[0:rows,0:cols]

#创建mask
img2gray=cv2.cvtColor(img2,cv2.COLOR_BGR2GRAY)
ret,mask=cv2.threshold(img2gray,175,255,cv2.THRESH_BINARY)
mask_inv=cv2.bitwise_not(mask)

#取roi中与mask中不为零的值对应有像素数
img1_bg=cv2.bitwise_and(roi,roi,mask=mask)
img2_fg=cv2.bitwise_and(img2,img2,mask=mask_inv)

#ROI合并图像
dst=cv2.add(img1_bg,img2_fg)
img1[0:rows,0:cols]=dst

#显示图像
cv2.imshow("ImageLogic",img1)
cv2.waitKey(0)
cv2.destroyAllWindows()

************************************************************************************************************
（七）颜色空间转换
1 转换颜色空间
常用函数
cv2.cvtColor()
cv2.inRange()
cv2.cvtColor()

def cvtColor(src,#目标图像
             code,#色彩转换模式
             dst=None,#输出图像
             dstCn=None)

示例代码如下:

import cv2
flags=[i for i in dir(cv2) if i.startswith('COLOR_')]
print(flags)


2 物体跟踪
从视频中获取每一帧图像
将图像转换为hsv空间
设置hsv阈值到蓝色范围

示例代码如下:
import cv2
import numpy as np

#取摄像头图像
cap=cv2.VideoCapture(0)

while(1):
    #获取每一帧
    ret,frame=cap.read()
    #转换HSV
    hsv=cv2.cvtColor(frame,cv2.COLOR_BGR2HSV)

    #设置蓝色的阈值
    lower_blue=np.array([110,50,50])
    upper_blue=np.array([130,255,255])

    #根据阈值构建掩模
    mask=cv2.inRange(hsv,lower_blue,upper_blue)

    #对原图像和掩模进行位运算
    res=cv2.bitwise_and(frame,frame,mask=mask)

    #显示图像
    cv2.imshow('frame',frame)
    cv2.imshow('mask',mask)
    cv2.imshow('res',res)
    k=cv2.waitKey(5)&0xFF
    if k==27:
        break
#释放窗体
cv2.destroyAllWindows()

3 怎样找到要跟踪对象的hsv值
import cv2
import numpy as np

green=np.uint8([0,255,0])
hsv_green=cv2.cvtColor(green,cv2.COLOR_BGR2HSV)
print(hsv_green)

输出结果:

OpenCV Error: Assertion failed ((scn == 3 || scn == 4) && (depth == CV_8U || depth == CV_32F)) in cv::ipp_cvtColor, file D:\Build\OpenCV\opencv-3.1.0\modules\imgproc\src\color.cpp, line 7646

Traceback (most recent call last):

  File "D:/workspace_pycharm/opencv_python/getHSV.py", line 13, in <module>

    hsv_green=cv2.cvtColor(green,cv2.COLOR_BGR2HSV)

cv2.error: D:\Build\OpenCV\opencv-3.1.0\modules\imgproc\src\color.cpp:7646: error: (-215) (scn == 3 || scn == 4) && (depth == CV_8U || depth == CV_32F) in function cv::ipp_cvtColor

#这里的三层括号别对应cvArray,cvMat,IplImage
green=np.uint8([[[0,255,0]]])
hsv_green=cv2.cvtColor(green,cv2.COLOR_BGR2HSV)
print(hsv_green)

输出结果
[[[ 60 255 255]]]


************************************************************************************************************
（八）几何变换：移动,旋转,仿射变换
/*
常用函数:
cv2.getPerspectiveTransform()
函数原型
def getPerspectiveTransform(src,
                            dst)

cv2.warpAffine()
函数原型,接收2*3的矩阵
def warpAffine(src, #输入源图像
               M,#透视变换的矩阵
               dsize,#输出图像尺寸
               dst=None,#输出图像
               flags=None,#输出图像的插值方法
               borderMode=None,#图像边界的处理方式
               borderValue=None)#边界有颜色设置


cv2.warpPerspective()
函数原型,接收3*3的矩阵
def warpPerspective(src,#输入图像
                    M,
                    dsize,#输出图像大小
                    dst=None,#输出图像
                    flags=None, #输出图像的插值方法
                    borderMode=None,#图像边界的处理方式
                    borderValue=None)#边界颜色的设置

*/



1 扩展缩放
import cv2
import numpy as np

img=cv2.imread('test.jpg')

#none是输出图像的尺寸,由于在后面设置,所以这里设为none
res=cv2.resize(img,None,fx=2,fy=2,interpolation=cv2.INTER_CUBIC)

#设置输出图像的尺寸
height,width=img.shape[:2]
res=cv2.resize(img,(2*width,2*height),interpolation=cv2.INTER_CUBIC)

while(1):
    cv2.imshow('res',res)
    cv2.imshow('img',img)

    #按esc退出
    if cv2.waitKey(1)&0xFF==27:
        break
cv2.destroyAllWindows()

2 平移
示例代码如下:

3 旋转
示例代码:
import cv2
import numpy as np

img=cv2.imread('test.jpg',0)
rows,cols=img.shape

#可以通过设置以下三个参数
m=cv2.getRotationMatrix2D((cols/2,rows/2),#旋转中心
                          45,#旋转角度
                          0.6)#缩放比例

dst=cv2.warpAffine(img,m,(2*cols,2*rows))
while(1):
    cv2.imshow('img',dst)
    #按下esc退出
    if cv2.waitKey(1)&0xFF==27:
        break
#释放
cv2.destroyAllWindows()

4 仿射变换
import cv2
import numpy as np
from matplotlib import pyplot as plt

img=cv2.imread('test1.jpg')
rows,cols,ch = img.shape

pts1 = np.float32([[56,65],[368,52],[28,387],[389,390]])
pts2 = np.float32([[0,0],[300,0],[0,300],[300,300]])

M = cv2.getPerspectiveTransform(pts1,#输入点
                                pts2)#输出点

dst = cv2.warpPerspective(img,M,(cols,rows))

plt.subplot(121),plt.imshow(img),plt.title('Input')
plt.subplot(122),plt.imshow(dst),plt.title('Output')
plt.show()

5 透视变换
import cv2
import numpy as np
from matplotlib import pyplot as plt

img=cv2.imread('test1.jpg')
rows,cols,ch = img.shape

pts1 = np.float32([[56,65],[368,52],[28,387],[389,390]])
pts2 = np.float32([[0,0],[300,0],[0,300],[300,300]])

M = cv2.getPerspectiveTransform(pts1,pts2)

dst = cv2.warpPerspective(img,M,(rows,cols))

plt.subplot(121),plt.imshow(img),plt.title('Input')
plt.subplot(122),plt.imshow(dst),plt.title('Output')
plt.show()

https://blog.csdn.net/retacn_yue/article/month/2016/11

