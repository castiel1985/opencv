官方提供了一个 yaml Docker Compose 配置文件的标准例子:
/*
version: "3"
services:

  redis:
    image: redis:alpine
    ports:
      - "6379"
    networks:
      - frontend
    deploy:
      replicas: 2
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure

  db:
    image: postgres:9.4
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - backend
    deploy:
      placement:
        constraints: [node.role == manager]

  vote:
    image: dockersamples/examplevotingapp_vote:before
    ports:
      - 5000:80
    networks:
      - frontend
    depends_on:
      - redis
    deploy:
      replicas: 2
      update_config:
        parallelism: 2
      restart_policy:
        condition: on-failure

  result:
    image: dockersamples/examplevotingapp_result:before
    ports:
      - 5001:80
    networks:
      - backend
    depends_on:
      - db
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure

  worker:
    image: dockersamples/examplevotingapp_worker
    networks:
      - frontend
      - backend
    deploy:
      mode: replicated
      replicas: 1
      labels: [APP=VOTING]
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      placement:
        constraints: [node.role == manager]

  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8080:8080"
    stop_grace_period: 1m30s
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]

networks:
  frontend:
  backend:

volumes:
  db-data:

*/

配置选项

１.bulid: 可以指定 Dockerfile 所在文件夹的路径
build: /path/to/build/dir
也可以是相对路径
build: ./dir

2. context : 可以是 Dockerfile 的文件路径，也可以是到链接到 git 仓库的 url
build:
  context: ./dir


３. dockerfile: 使用此 dockerfile 文件来构建，必须指定构建路径
build:
  context: .
  dockerfile: Dockerfile-alternate

４. args
添加构建参数，这些参数是仅在构建过程中可访问的环境变量
首先， 在Dockerfile中指定参数：
ARG buildno
ARG password
RUN echo "Build number: $buildno"
RUN script-requiring-password.sh "$password"

然后指定 build 下的参数,可以传递映射或列表
build:
  context: .
  args:
    buildno: 1
    password: secret


５. cache_from
编写缓存解析镜像列表
build:
  context: .
  cache_from:
    - alpine:latest
    - corp/web_app:3.14


6. labels
使用 Docker标签 将元数据添加到生成的镜像中，可以使用数组或字典。
建议使用反向 DNS 标记来防止签名与其他软件所使用的签名冲突
build:
  context: .
  labels:
    com.example.description: "Accounting webapp"
    com.example.department: "Finance"
    com.example.label-with-empty-value: ""
或
build:
  context: .
  labels:
    - "com.example.description=Accounting webapp"
    - "com.example.department=Finance"
    - "com.example.label-with-empty-value"

7.shm_size
设置容器 /dev/shm 分区的大小，值为表示字节的整数值或表示字符的字符串
build:
  context: .
  shm_size: '2gb'

8. target
根据对应的 Dockerfile 构建指定 Stage

build:
    context: .
    target: prod

9. cap_add、cap_drop
添加或删除容器功能，可查看 man 7 capabilities

cap_add:
  - ALL

cap_drop:
  - NET_ADMIN
  - SYS_ADMIN

10. command   覆盖容器启动后默认执行的命令
command: bundle exec thin -p 3000
该命令也可以是一个列表，方法类似于 dockerfile:
command: ["bundle", "exec", "thin", "-p", "3000"]

11. configs
使用服务 configs 配置为每个服务赋予相应的访问权限，支持两种不同的语法。
Note: 配置必须存在或在 configs 此堆栈文件的顶层中定义，否则堆栈部署失效

12. image
services:
  web:
    image: hello-world


13.container_name
Compose 的容器名称格式是：<项目名称><服务名称><序号>

14.depends_on
在使用 Compose 时，最大的好处就是少打启动命令，但是一般项目容器启动的顺序是有要求的，
如果直接从上到下启动容器，必然会因为容器依赖问题而启动失败。例如在没启动数据库容器的时候
启动了应用容器，这时候应用容器会因为找不到数据库而退出，为了避免这种情况我们需要加入一个
标签，就是 depends_on，这个标签解决了容器的依赖、启动先后的问题。
version: '2'
services:
  web:
    build: .
    depends_on:
      - db
      - redis
  redis:
    image: redis
  db:
    image: postgres

15.dns
和 --dns 参数一样用途，格式如下：
dns: 8.8.8.8

16.tmpfs
挂载临时目录到容器内部，与 run 的参数一样效果：
tmpfs: /run
tmpfs:
  - /run
  - /tmp

17.entrypoint
在 Dockerfile 中有一个指令叫做 ENTRYPOINT 指令，用于指定接入点，
entrypoint: /code/entrypoint.sh
或者
entrypoint:
    - php
    - -d
    - zend_extension=/usr/local/lib/php/extensions/no-debug-non-zts-20100525/xdebug.so
    - -d
    - memory_limit=-1
    - vendor/bin/phpunit


18.env_file
.env这个文件可以设置 Compose 的变量，而在 docker-compose.yml 中可以定义一个专门存放变量的文件。
env_file: .env
或者
env_file:
  - ./common.env
  - ./apps/web.env
  - /opt/secrets.env


19.environment
与上面的 env_file 标签完全不同，反而和 arg 有几分类似，这个标签的作用是设置镜像变量，它可以保存变量到
镜像里面，也就是说启动的容器也会包含这些变量设置，这是与 arg 最大的不同。一般 arg 标签的变量仅用在构建
过程中。而 environment 和 Dockerfile 中的 ENV 指令一样会把变量一直保存在镜像、容器中，类似 docker run -e 的效果。
environment:
  RACK_ENV: development
  SHOW: 'true'
  SESSION_SECRET:

environment:
  - RACK_ENV=development
  - SHOW=true
  - SESSION_SECRET

20.expose
这个标签与Dockerfile中的EXPOSE指令一样，用于指定暴露的端口，但是只是作为一种参考，实际上docker-compose.yml的端口映射
还得ports这样的标签。
expose:
 - "3000"
 - "8000"

21.external_links
在使用Docker过程中，我们会有许多单独使用docker run启动的容器，为了使Compose能够连接这些不在docker-compose.yml中定义的
容器，我们需要一个特殊的标签，就是external_links，它可以让Compose项目里面的容器连接到那些项目配置外部的容器（前提是外部容
器中必须至少有一个容器是连接到与项目内的服务的同一个网络里面）。
格式如下：
external_links:
 - redis_1
 - project_db_1:mysql
 - project_db_1:postgresql

22.extra_hosts
添加主机名的标签，就是往/etc/hosts文件中添加一些记录，与Docker client的--add-host类似：
extra_hosts:
 - "somehost:162.242.195.82"
 - "otherhost:50.31.209.229"


23.links
还记得上面的depends_on吧，那个标签解决的是启动顺序问题，这个标签解决的是容器连接问题，与Docker client的--link一样效果，
会连接到其它服务中的容器。
格式如下：
links:
 - db
 - db:database
 - redis


24.logging
这个标签用于配置日志服务。格式如下：
logging:
  driver: syslog
  options:
    syslog-address: "tcp://192.168.0.42:123"
默认的driver是json-file。只有json-file和journald可以通过docker-compose logs显示日志，其他方式有其他日志查看方式，但目前
Compose不支持。对于可选值可以使用options指定。

25. pid
pid: "host"
将PID模式设置为主机PID模式，跟主机系统共享进程命名空间。容器使用这个标签将能够访问和操纵其他容器和宿主机的名称空间。

26.ports
映射端口的标签。
使用HOST:CONTAINER格式或者只是指定容器的端口，宿主机会随机映射端口。
ports:
 - "3000"
 - "8000:8000"
 - "49100:22"
 - "127.0.0.1:8001:8001"

27.security_opt
为每个容器覆盖默认的标签。简单说来就是管理全部服务的标签。比如设置全部服务的user标签值为USER。
security_opt:
  - label:user:USER
  - label:role:ROLE

28.stop_signal
设置另一个信号来停止容器。在默认情况下使用的是SIGTERM停止容器。设置另一个信号可以使用stop_signal标签。
stop_signal: SIGUSR1

29.volumes
挂载一个目录或者一个已存在的数据卷容器，可以直接使用 [HOST:CONTAINER] 这样的格式，或者使用 [HOST:CONTAINER:ro] 这样的格式，后者对于容器来说，数据卷是只读的，这样可以有效保护宿主机的文件系统。
Compose的数据卷指定路径可以是相对路径，使用 . 或者 .. 来指定相对目录。
数据卷的格式可以是下面多种形式：
volumes:
  // 只是指定一个路径，Docker 会自动在创建一个数据卷（这个路径是容器内部的）。
  - /var/lib/mysql

  // 使用绝对路径挂载数据卷
  - /opt/data:/var/lib/mysql

  // 以 Compose 配置文件为中心的相对路径作为数据卷挂载到容器。
  - ./cache:/tmp/cache

  // 使用用户的相对路径（~/ 表示的目录是 /home/<用户目录>/ 或者 /root/）。
  - ~/configs:/etc/configs/:ro

  // 已经存在的命名的数据卷。
  - datavolume:/var/lib/mysql

30.volumes_from
从其它容器或者服务挂载数据卷，可选的参数是 :ro或者 :rw，前者表示容器只读，后者表示容器对数据卷是可读可写的。默认情况下是可读可写的。
volumes_from:
  - service_name
  - service_name:ro
  - container:container_name
  - container:container_name:rw

31.cap_add, cap_drop
添加或删除容器的内核功能。详细信息在前面容器章节有讲解，此处不再赘述。
cap_add:
  - ALL
cap_drop:
  - NET_ADMIN
  - SYS_ADMIN

32.cgroup_parent
指定一个容器的父级cgroup。
cgroup_parent: m-executor-abcd

33.devices
设备映射列表。与Docker client的--device参数类似。
devices:
  - "/dev/ttyUSB0:/dev/ttyUSB0"

34.extends
这个标签可以扩展另一个服务，扩展内容可以是来自在当前文件，也可以是来自其他文件，相同服务的情况下，后来者会有选择地覆盖原有配置。
extends:
  file: common.yml
  service: webapp

35.network_mode
网络模式，与Docker client的--net参数类似，只是相对多了一个service:[service name] 的格式。
例如：
network_mode: "bridge"
network_mode: "host"
network_mode: "none"
network_mode: "service:[service name]"
network_mode: "container:[container name/id]"

36.networks
加入指定网络，格式如下：
services:
  some-service:
    networks:
     - some-network
     - other-network
/*
services:
  some-service:
    networks:
      some-network:
        aliases:
         - alias1
         - alias3
      other-network:
        aliases:
         - alias2
*/

37.other
cpu_quota: 50000
cpuset: 0,1

user: postgresql
working_dir: /code

domainname: foo.com
hostname: foo
ipc: host
mac_address: 02:42:ac:11:65:43

mem_limit: 1000000000
memswap_limit: 2000000000
privileged: true

restart: always

read_only: true
shm_size: 64M
stdin_open: true
tty: true