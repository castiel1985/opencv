1.用WerkZeug实现密码的加密存储
generate_password_hash(password)和check_password_hash(hash,password)。前者用来将明文密码加密，返回加密后的密文，用来进行用户注册。


2.flask-login
(1)flask_login进行用户的登录和登出管理，需要将我们的User模型继承flask_login的UserMixin基类
from flask_login import UserMixin  
class User(db.Model,UserMixin):  


(2)实现flask_login的初始化,引入LoginManager:
from flask_login import LoginManager  
  
loginmanager=LoginManager()  
loginmanager.session_protection='strong'  
loginmanager.login_view='main.login'  
  
def create_app(config_name):    
    app=Flask(__name__)    
    ......  
    loginmanager.init_app(app)  
    ......  




(3)使用login_user和logout_user进行用户的登录和登出
class NameForm(FlaskForm):    
    name=TextField('what is your name?',validators=[DataRequired()])    
    password=PasswordField('what is your password?',validators=[DataRequired()])  
    login=SubmitField('login')  
    logout=SubmitField('logout')  


@main.route('/login',methods=['GET','POST'])  
def login():  
    form=NameForm()  
    user=User.query.filter_by(username=form.name.data).first()  
    if form.validate_on_submit():  
        if user is not None and user.confirm_password(form.password.data):  
            if current_user.is_authenticated:  
                logout_user()  
                flash('User Logout')  
            else:  
                login_user(user,True)  
                flash('User Login')  
    return render_template('login.html',form=form)  



<form method="POST">    
     {% for message in get_flashed_messages() %}  
        <p>{{ message }}</p>  
     {% endfor %}  
    {{form.hidden_tag()}}    
    <p>{{form.name.label}}</p>  
    {{form.name()}}    
    <p>{{ form.password.label }}</p>  
    {{ form.password() }}  
    {%if current_user.is_authenticated %}  
     <br>{{form.logout}}  
     {% else %}  
     <br>{{form.login}}  
     {% endif %}  
</form> 




(4)使用login_required限制登录对象

@main.route('/loginrq',methods=['GET','POST'])  
@login_required  
def loginrq():  
    return 'I''m a private url'  




3.利用SQLAlchemy进行分页查询
model:
class Post(db.Model):  
    __tablename__='posts'  
    id=db.Column(db.Integer,primary_key=True)  
    body=db.Column(db.Text)  
    timestamp=db.Column(db.DateTime,index=True,default=datetime.utcnow)  


view:
@main.route('/',methods=['GET','POST'])    
def index():    
    page=request.args.get('page',1,type=int)  
    pagination=Post.query.paginate(page,per_page=1,error_out=False)  
    posts=pagination.items  
    return render_template('index.html',posts=posts,pagination=pagination) 


html:
{% for post in posts %}  
{{ post.body }}  
{% endfor %}  



https://blog.csdn.net/hyman_c/article/details/54382161


4.Flask-pagedown实现博客文章预览的功能
使用MarkDown实现博客文章存储成富文本格式





5.RESTFUL

(1)在Post模型中增加两个函数，分别将Post对象转换成JSON格式的资源以及解析解析JSON字符串
lassPost(db.Model):  
    __tablename__='posts'  
    id=db.Column(db.Integer,primary_key=True)  
    body=db.Column(db.Text)  
    timestamp=db.Column(db.DateTime,index=True,default=datetime.utcnow)  
    html_body=db.Column(db.Text)  
   
def to_json(self):  
        json_post={  
        'url':url_for('main.get_post',id=self.id,_external=True),  
        'body':self.body,  
        'html_body':self.html_body  
        }  
        Return json_post  
    
    @staticmethod  
    def from_json(json_post):  
        body=json_post.get('body')  
        return Post(body=body)  

定义了to_json成员函数，将Post相关信息转换成了JSON格式的资源字符串，这里面url表示获取这一Post对象的地址，是该Post对象的唯一标示。而我们只转换了body和html_body两个字段，因为构建JSON时不需要将模型的全部字段进行转换。

        from_json被定义成了一个静态函数，它的参数json_post是一个json格式的字符串，将来会由http请求传给我们。

(2)增加REST API的路由映射
先增加新增文章的API：
@main.route('/posts/',methods=[‘POST’])  
def new_post():  
    post=Post.from_json(request.json)  
    db.session.add(post)  
    db.session.commit()  
    return jsonify(post.to_json()) 


接下来，编写通过GET方法获取文章的API，分别获取所有的文章和按照id获取文章：
@main.route('/posts/',methods=['GET'])  
def get_posts():  
   post=Post.query.all()  
   return jsonify({'posts':[post.to_json() for post in posts]})  
  
@main.route('/posts/<int:id>',methods=['GET'])  
def get_post(id):  
    post=Post.query.get_or_404(id)  
returnjsonify(post.to_json())  


6.Flask中三种测试方法
(1)单元测试并统计测试的覆盖率
(2)使用Flask Web测试客户端进行测试
(3)使用selenium进行自动化测试

https://blog.csdn.net/hyman_c/article/details/54632664




